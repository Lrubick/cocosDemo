CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      properties: &props
        color:        { value: [1, 1, 1, 1], inspector: { type: color } }
        tilingOffset: { value: [1, 1, 0, 0] }
        mainTexture:  { value: grey         }
        center0: { value: [0.5, 0.5, 0, 0], inspector: { displayName: "水波中心" } }
        center1: { value: [0.5, 0.5, 0, 0], inspector: { displayName: "水波中心" } }
        center2: { value: [0.5, 0.5, 0, 0], inspector: { displayName: "水波中心" } }
        center3: { value: [0.5, 0.5, 0, 0], inspector: { displayName: "水波中心" } }
        center4: { value: [0.5, 0.5, 0, 0], inspector: { displayName: "水波中心" } }
        center5: { value: [0.5, 0.5, 0, 0], inspector: { displayName: "水波中心" } }
        center6: { value: [0.5, 0.5, 0, 0], inspector: { displayName: "水波中心" } }
        center7: { value: [0.5, 0.5, 0, 0], inspector: { displayName: "水波中心" } }
        center8: { value: [0.5, 0.5, 0, 0], inspector: { displayName: "水波中心" } }
        center9: { value: [0.5, 0.5, 0, 0], inspector: { displayName: "水波中心" } }
        sin_A: { value: 0.01, inspector: { displayName: "a sin wt ", step: 0.01 } }
        sin_W: { value: 1, inspector: { displayName: "a sin wt " } }
        sin_D: { value: 10, inspector: { displayName: "a sin wt + dd " } }
  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram unlit-vs %{
  precision mediump float;
  #include <cc-global>
  #include <cc-local-batch>
  #include <input>

  #if USE_VERTEX_COLOR
    in vec4 a_color;
    out vec4 v_color;
  #endif

  #if USE_TEXTURE
    
    out vec2 v_uv;
    uniform TexCoords {
      vec4 tilingOffset;
    };
  #endif

  highp vec4 vert () {
    vec4 position;
    CCVertInput(position);

    highp mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    highp vec4 pos = cc_matProj * (cc_matView * matWorld) * position;

    #if USE_TEXTURE
      v_uv = a_texCoord;
      #if FLIP_UV
        v_uv.y = 1.0 - v_uv.y;
      #endif
      v_uv = v_uv * tilingOffset.xy + tilingOffset.zw;
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

    return pos;
  }
}%

CCProgram unlit-fs %{
  precision mediump float;
  #include <output>

  #if USE_TEXTURE
    in vec2 v_uv;
    uniform sampler2D mainTexture;
    uniform Tex {
      vec4 center0;
      vec4 center1;
      vec4 center2;
      vec4 center3;
      vec4 center4;
      vec4 center5;
      vec4 center6;
      vec4 center7;
      vec4 center8;
      vec4 center9;
      float sin_A;
      float sin_W;
      float sin_D;
    };
  #endif

  #if USE_COLOR
    uniform Constant {
      vec4 color;
    };
  #endif

  #if USE_VERTEX_COLOR
    in vec4 v_color;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      vec4 center[10];
      vec2 uv = v_uv;
      
      center[0] = center0;
      center[1] = center1;
      center[2] = center2;
      center[3] = center3;
      center[4] = center4;
      center[5] = center5;
      center[6] = center6;
      center[7] = center7;
      center[8] = center8;
      center[9] = center9;
      
      for(int i = 0; i < 10; i++){
        vec2 uvDir = normalize(v_uv - center[i].xy);
        float dis = distance(v_uv, center[i].xy);
        float dis_time = center[i].z - cc_time.x + dis * 3.0;
        if ( center[i].z > 0.0 && dis_time < 0.0 && dis_time > -0.1 ){
          uv += sin_A  * uvDir * sin(sin_W * cc_time.x - dis * sin_D);
        }
      }
      
      o *= texture(mainTexture, uv);
    #endif

    #if USE_COLOR
      o *= color;
    #endif

    #if USE_VERTEX_COLOR
      o *= v_color;
    #endif

    return CCFragOutput(o);
  }
}%