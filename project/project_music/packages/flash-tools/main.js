'use strict';var fs=require('fs');var xml2js=require('xml2js');const{createCipher}=require('crypto');var isSingleFrameCreateAnim=true;module.exports={load(){},unload(){},messages:{'asset-db:assets-created'(){module.exports.queryAndCreateAnim()},'flash-tools:menu-create-anim-with-config'(){module.exports.queryAndCreateAnim()},'flash-tools:menu-create-anim-with-images'(){let selections=Editor.Selection.curSelection("asset");module.exports.createAnimWithImages(selections)},'flash-tools:menu-create-node-with-anim'(){let selections=Editor.Selection.curSelection("asset");module.exports.createAnimNodeWithSelections(selections)}},createAnimWithImages(selections){let imageDatas=[];for(let i=0,len=selections.length;i<len;i++){let assetUuid=selections[i];let assetInfo=Editor.assetdb.assetInfoByUuid(assetUuid);if(assetInfo.type==="texture"){let assetName=assetInfo.url.substring(assetInfo.url.lastIndexOf('/')+1);let dotIndex=assetName.lastIndexOf('.');if(dotIndex>-1)assetName=assetName.substring(0,dotIndex);let assetNumString=assetName.match(/\d+/);let noNumAssetName=assetName.replace(assetNumString,'');if(Editor.assetdb.containsSubAssetsByUuid(assetUuid)){let subAssetInfos=Editor.assetdb.subAssetInfosByUuid(assetUuid);if(subAssetInfos.length==1){let subAssetInfo=subAssetInfos[0];if(subAssetInfo.type==="sprite-frame"){let assetMetaStrings=fs.readFileSync(assetInfo.path+".meta","utf8");let assetMetaData=JSON.parse(assetMetaStrings);for(let key in assetMetaData.subMetas){let spriteFrameMetaData=assetMetaData.subMetas[key];spriteFrameMetaData.trimType="none";spriteFrameMetaData.offsetX=0;spriteFrameMetaData.offsetY=0;spriteFrameMetaData.trimX=0;spriteFrameMetaData.trimY=0;spriteFrameMetaData.width=spriteFrameMetaData.rawWidth;spriteFrameMetaData.height=spriteFrameMetaData.rawHeight;spriteFrameMetaData.borderTop=0;spriteFrameMetaData.borderBottom=0;spriteFrameMetaData.borderLeft=0;spriteFrameMetaData.borderRight=0;break}let assetMetaDataStrings=JSON.stringify(assetMetaData,null,"\t");Editor.assetdb.saveMeta(assetInfo.uuid,assetMetaDataStrings,(err,meta)=>{});imageDatas.push({spriteFrameUuid:subAssetInfo.uuid,assetName:assetName,noNumAssetName:noNumAssetName,assetUrl:assetInfo.url,num:parseInt(assetNumString)})}}}}}if(imageDatas.length>0){if(!isSingleFrameCreateAnim&&imageDatas.length==1)return;imageDatas.sort((a,b)=>a.num-b.num);let frameDatas=[];for(let i=0,len=imageDatas.length;i<len;i++){frameDatas[i]={spriteFrameUuid:imageDatas[i].spriteFrameUuid}}let zeroNoNumName=imageDatas[0].noNumAssetName;let zeroUrl=imageDatas[0].assetUrl;let animUrl=zeroUrl.substr(0,zeroUrl.lastIndexOf('/')+1);animUrl+=zeroNoNumName+".anim";module.exports.createSequenceFrameAnimationClip(zeroNoNumName,frameDatas,animUrl)}},createAnimNodeWithSelections(selections){for(let i=0,len=selections.length;i<len;i++){let uuid=selections[i];let info=Editor.assetdb.assetInfoByUuid(uuid);if(info.type==="animation-clip"){module.exports.createAnimNodeWithUuid(uuid,info)}}},createAnimNodeWithUuid(animFileUuid,info){let animStrings=fs.readFileSync(info.path,"utf8");let animData=JSON.parse(animStrings);Editor.Ipc.sendToPanel("scene","scene:create-node-by-classid",animData._name);Editor.Scene.callSceneScript("flash-tools","set-last-node",animData,(lastNodeUuid,spriteComponentUuid,animationComponentUuid)=>{Editor.Ipc.sendToPanel("scene","scene:set-property",{id:spriteComponentUuid,path:"spriteFrame",type:"cc.SpriteFrame",value:{uuid:animData["curveData"]["comps"]["cc.Sprite"]["spriteFrame"][0]["value"]["__uuid__"]},isSubProp:false});Editor.Ipc.sendToPanel("scene","scene:set-property",{id:animationComponentUuid,path:"defaultClip",type:"cc.AnimationClip",value:{uuid:animFileUuid},isSubProp:false})})},queryAndCreateAnim(){this.queryMultipleImageConfigAndCreateAnim();this.queryAtlasAndCreateAnim()},queryMultipleImageConfigAndCreateAnim(){Editor.assetdb.queryAssets('db://assets/textures/**\/*','asset',(err,results)=>{results.forEach((result)=>{if(result.path.indexOf(".multipleImageAnim")>-1){let animPath=result.path.replace(".multipleImageAnim",".anim");Editor.assetdb.delete([result.url]);if(!fs.existsSync(animPath)){module.exports.createAnimationWithMultipleImageConfigUrl(result.url,result.path)}}})})},createAnimationWithMultipleImageConfigUrl(configUrl,configPath){let multipleImageAnimStrings=fs.readFileSync(Editor.url(configUrl,'utf8'),'utf8');xml2js.parseString(multipleImageAnimStrings,function(err,result){let configName=configUrl.substring(configUrl.lastIndexOf("/")+1,configUrl.lastIndexOf('.'));let animData=module.exports.createAnimationWithMultipleImageConfigData(result,configName,configUrl,configPath);if(animData){let animUrl=configUrl.substring(0,configUrl.lastIndexOf('.'))+".anim";module.exports.createAnimationClipFile(animUrl,JSON.stringify(animData,null,"\t"))}})},createAnimationWithMultipleImageConfigData(data,configName,configUrl,configPath){let frameNames=data['root']['name'];let frameDatas=[];let isExistEmptyFrame=false;let deleteUrls=[];for(let i=0,len=frameNames.length;i<len;i++){let frameName=frameNames[i];let framePlistUrl=configUrl.replace(configName+'.multipleImageAnim',frameName+'.plist');let framePlistPath=configPath.replace(configName+'.multipleImageAnim',frameName+'.plist');let framePngMetaPath=configPath.replace(configName+'.multipleImageAnim',frameName+'.png.meta');if(fs.existsSync(framePlistPath)){let framePlistStrings=fs.readFileSync(framePlistPath,'utf8');xml2js.parseString(framePlistStrings,(err,result)=>{let frameData=result.plist.dict[0].dict[0];frameDatas[i]=frameData;module.exports.updatePngMetaWithFrameData(framePngMetaPath,frameData)});deleteUrls.push(framePlistUrl)}else{isExistEmptyFrame=true}}Editor.assetdb.delete(deleteUrls);if(!isExistEmptyFrame){return module.exports.createAnimationWithFrameDatas(frameDatas,configName,configUrl)}else{Editor.error(configUrl+" There are empty frames, the creation of .anim has been canceled.")}return null},createAnimationWithFrameDatas(frameDatas,name,configUrl){let animData={"__type__":"cc.AnimationClip","_name":name,"_objFlags":0,"_native":"","_duration":0,"sample":24,"speed":1,"wrapMode":2,"curveData":{"comps":{"cc.Sprite":{"spriteFrame":[]}},"props":{"anchorX":[],"anchorY":[]}},"events":[]};let spriteFrameList=animData["curveData"]["comps"]["cc.Sprite"]["spriteFrame"];let anchorXList=animData["curveData"]["props"]["anchorX"];let anchorYList=animData["curveData"]["props"]["anchorY"];let interval=1/animData.sample;let frameDatasLength=frameDatas.length;animData._duration=interval*frameDatasLength;for(let i=0;i<frameDatasLength;i++){let frameData=frameDatas[i];let keyName=frameData.key[0];let spriteFrameUrl=configUrl.replace(name+'.multipleImageAnim',keyName+'.png/'+keyName);let frameTime=interval*i;let spriteFrameUuid=Editor.assetdb.urlToUuid(spriteFrameUrl);let obj={"frame":frameTime,"value":{"__uuid__":spriteFrameUuid}};spriteFrameList[i]=obj;let anchorStr=frameData.dict[0].string[4];if(anchorStr){let anchorStrDotIndex=anchorStr.indexOf(',');let anchorX=Number(anchorStr.substring(1,anchorStrDotIndex));let anchorY=Number(anchorStr.substring(anchorStrDotIndex+1,anchorStr.length-1));let anchorXObj={frame:frameTime,value:anchorX,curve:"constant"};let anchorYObj={frame:frameTime,value:anchorY,curve:"constant"};anchorXList[i]=anchorXObj;anchorYList[i]=anchorYObj}}return animData},updatePngMetaWithFrameData(framePngMetaPath,frameData){let frameName=frameData['key'][0];let pngMetaStrings=fs.readFileSync(framePngMetaPath,'utf8');let pngMetaData=JSON.parse(pngMetaStrings);let frameString=frameData.dict[0].string[0];frameString=frameString.substring(1,frameString.length-1);let trimString=frameString.substring(1,frameString.indexOf('}'));let sizeString=frameString.substring(frameString.lastIndexOf('{')+1,frameString.length-1);let trimX=Number(trimString.substring(0,trimString.indexOf(',')));let trimY=Number(trimString.substring(trimString.indexOf(',')+1));let width=Number(sizeString.substring(0,sizeString.indexOf(',')));let height=Number(sizeString.substring(sizeString.indexOf(',')+1));let offsetString=frameData.dict[0].string[1];offsetString=offsetString.substring(1,offsetString.length-1);let offsetX=Number(offsetString.substring(0,offsetString.indexOf(',')));let offsetY=Number(offsetString.substring(offsetString.indexOf(',')+1));pngMetaData['type']='sprite';if(!pngMetaData['subMetas']){pngMetaData['subMetas']={}}let subMetas=pngMetaData['subMetas'];if(!subMetas[frameName]){subMetas[frameName]={"ver":"1.0.4","uuid":module.exports.getNewUuid(),"rawTextureUuid":pngMetaData.uuid,"trimType":"custom","trimThreshold":1,"rotated":false,"offsetX":offsetX,"offsetY":offsetY,"trimX":trimX,"trimY":trimY,"width":width,"height":height,"rawWidth":pngMetaData.width,"rawHeight":pngMetaData.height,"borderTop":0,"borderBottom":0,"borderLeft":0,"borderRight":0,"subMetas":{}}}else{let frameNameObj=subMetas[frameName];if(!frameNameObj.uuid)frameNameObj.uuid=module.exports.getNewUuid();frameNameObj.rawTextureUuid=pngMetaData.uuid;frameNameObj.offsetX=offsetX;frameNameObj.offsetY=offsetY;frameNameObj.trimX=trimX;frameNameObj.trimY=trimY;frameNameObj.width=width;frameNameObj.height=height;frameNameObj.rawWidth=pngMetaData.width;frameNameObj.rawHeight=pngMetaData.height}let pngMetaDataStrings=JSON.stringify(pngMetaData,null,"\t");Editor.assetdb.saveMeta(pngMetaData.uuid,pngMetaDataStrings,(err,meta)=>{})},getNewUuid(){let uuid=Editor.Utils.UuidUtils.uuid();let decompressUuid=Editor.Utils.UuidUtils.decompressUuid(uuid);return decompressUuid},queryAtlasAndCreateAnim(){Editor.assetdb.queryAssets('db://assets/textures/**\/*','sprite-atlas',(err,results)=>{results.forEach((result)=>{let animPath=result.path.replace(".plist",".anim");if(!fs.existsSync(animPath)){module.exports.createAnimationWithAtlasUrl(result.url)}})})},createAnimationWithAtlasUrl(strAtlasUrl){let plistString=fs.readFileSync(Editor.url(strAtlasUrl,'utf8'),'utf8');xml2js.parseString(plistString,(err,result)=>{let name=strAtlasUrl.substring(strAtlasUrl.lastIndexOf("/")+1,strAtlasUrl.lastIndexOf('.'));let animData=module.exports.createAnimationWithPlistData(result,name,strAtlasUrl);if(animData){let animUrl=strAtlasUrl.substring(0,strAtlasUrl.lastIndexOf('.'))+".anim";module.exports.createAnimationClipFile(animUrl,JSON.stringify(animData,null,"\t"))}})},createAnimationWithPlistData(data,name,strAtlasUrl){if(data.plist.dict[0].key[0]!="frames")return null;let frameDatas=data.plist.dict[0].dict[0];let keys=frameDatas.key;if(!keys)return null;if(!isSingleFrameCreateAnim&&keys.length<=1)return null;let animData={"__type__":"cc.AnimationClip","_name":name,"_objFlags":0,"_native":"","_duration":0,"sample":24,"speed":1,"wrapMode":2,"curveData":{"comps":{"cc.Sprite":{"spriteFrame":[]}},"props":{"anchorX":[],"anchorY":[]}},"events":[]};let spriteFrameList=animData["curveData"]["comps"]["cc.Sprite"]["spriteFrame"];let anchorXList=animData["curveData"]["props"]["anchorX"];let anchorYList=animData["curveData"]["props"]["anchorY"];let interval=1/animData.sample;let keysLength=keys.length;animData._duration=interval*keysLength;for(let i=0;i<keysLength;i++){let keyName=keys[i];let spriteFrameUrl=strAtlasUrl+"/"+keyName;let frameTime=interval*i;let spriteFrameUuid=Editor.assetdb.urlToUuid(spriteFrameUrl);let obj={"frame":frameTime,"value":{"__uuid__":spriteFrameUuid}};spriteFrameList[i]=obj;let anchorStr=frameDatas.dict[i].string[4];if(anchorStr){let anchorStrDotIndex=anchorStr.indexOf(',');let anchorX=Number(anchorStr.substring(1,anchorStrDotIndex));let anchorY=Number(anchorStr.substring(anchorStrDotIndex+1,anchorStr.length-1));let anchorXObj={frame:frameTime,value:anchorX,curve:"constant"};let anchorYObj={frame:frameTime,value:anchorY,curve:"constant"};anchorXList[i]=anchorXObj;anchorYList[i]=anchorYObj}}return animData},createSequenceFrameAnimationClip(animFileName,frameDatas,animUrl){let frameCount=frameDatas.length;let animData={"__type__":"cc.AnimationClip","_name":animFileName,"_objFlags":0,"_native":"","_duration":0,"sample":24,"speed":1,"wrapMode":2,"curveData":{"comps":{"cc.Sprite":{"spriteFrame":[]}}},"events":[]};let interval=1/animData.sample;animData._duration=interval*frameCount;let spriteFrameList=animData["curveData"]["comps"]["cc.Sprite"]["spriteFrame"];for(let i=0;i<frameCount;i++){let frameData=frameDatas[i];let frameTime=interval*i;spriteFrameList[i]={"frame":frameTime,"value":{"__uuid__":frameData.spriteFrameUuid}};if(frameData.anchor){if(!animData.curveData["props"]){animData.curveData["props"]={"anchorX":[],"anchorY":[]}}animData.curveData["props"]["anchorX"][i]={frame:frameTime,value:frameData.anchor.x,curve:"constant"};animData.curveData["props"]["anchorY"][i]={frame:frameTime,value:frameData.anchor.y,curve:"constant"}}}let animDataStrings=JSON.stringify(animData,null,"\t");module.exports.createAnimationClipFile(animUrl,animDataStrings)},createAnimationClipFile(strAnimUrl,strData){Editor.assetdb.create(strAnimUrl,strData,(err,results)=>{})}};